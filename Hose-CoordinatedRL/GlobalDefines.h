#ifndef __GLOBAL_DEFINES__
#define __GLOBAL_DEFINES__
#include "stdafx.h"

typedef double Q_VALUE_TYPE;
typedef double REWARD_TYPE;

class CParameterManager;
extern CParameterManager *g_pParameterManager;

#define AVOID_COLLISIONS_MODULE_ID 10
#define DIST_KEEP_MODULE_ID 20
#define DIST_KEEP_MODULE2_ID 21
#define GOAL_REACH_MODULE_ID 30
#define GOAL_REACH_MODULE_v2_ID 34
#define GOAL_REACH_MODULE_v3_ID 35
#define IN_GRID_MODULE_ID 40
#define CORDINATION_MODULE_ID 50
#define COMPLETE_MODULE 100


/*
#define ABSOLUTE_COORD_SPACE GRID_SIZE_X
#define ABSOLUTE_POSITION_SPACE (ABSOLUTE_COORD_SPACE * ABSOLUTE_COORD_SPACE)
*/
#define ABSOLUTE_POSITION_SPACE g_absPosCountInRange
/*
#define MAP_ABSOLUTE_POSITION_TO_ID(x,y) ((x+ABSOLUTE_COORD_SPACE)*ABSOLUTE_COORD_SPACE + (y+ABSOLUTE_COORD_SPACE))
#define MAP_ABS_ID_TO_ABS_POSITION(id,x,y) {x=(id/ABSOLUTE_COORD_SPACE)-GRID_MAX_X;y=(id%ABSOLUTE_COORD_SPACE)-GRID_MAX_X;}
*/
/*#define RELATIVE_COORD_SPACE (2*HOSE_SEGMENT_LENGTH+1)
#define RELATIVE_POSITION_SPACE (RELATIVE_COORD_SPACE*RELATIVE_COORD_SPACE)*/
#define RELATIVE_POSITION_SPACE g_relPosCountInRange
/*
#define MAP_RELATIVE_POSITION_TO_ID(x,y) ((x+RELATIVE_COORD_SPACE)*RELATIVE_COORD_SPACE + (y+RELATIVE_COORD_SPACE))
#define MAP_REL_ID_TO_ABS_POS(id,x,y,prevX,prevY) {x=prevX+(id/RELATIVE_COORD_SPACE)-HOSE_SEGMENT_LENGTH;y=prevY+(id%RELATIVE_COORD_SPACE)-HOSE_SEGMENT_LENGTH;}
*/
/*#define STATE_SPACE ((int)(pow((float)RELATIVE_POSITION_SPACE,ROBOT_COUNT)*GRID_CELL_COUNT))*/



#define ACTION_UP 0
#define ACTION_RIGHT 1
#define ACTION_DOWN 2
#define ACTION_LEFT 3
#define ACTION_NONE 4
#define ACTION_LEFT_UP 5
#define ACTION_LEFT_DOWN 6
#define ACTION_RIGHT_UP 7
#define ACTION_RIGHT_DOWN 8





//PER-MODULE RL PARAMETERS
//	ALPHA; // step-size parameter. How fast do we want the system to learn?
//	GAMMA; // discount rate. Present value of future rewards.


/*
#define ROBOT_FROM_ACTION_ID(x) (x/ACTION_COUNT)
#define ACTION_FROM_ACTION_ID(x) (x%ACTION_COUNT)

#define ROBOT_ACTION_SPACE (ACTION_COUNT*ROBOT_COUNT)
*/
//						ROBOT POSITIONS (RELATIVE)               GOAL (ABSOLUTE)
//#define Q_ENTRY_COUNT ((int)(pow((float)RELATIVE_POSITION_SPACE,ROBOT_COUNT)*GRID_CELL_COUNT))

#endif